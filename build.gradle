buildscript {
	ext {
		springBootVersion = '1.5.2.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'

version = '1.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

configurations {
	providedRuntime
	myBatisGenerator
}

dependencies {
	compile(
			'com.alibaba:druid:1.0.23',
			'javax.persistence:persistence-api:1.0',
			'org.springframework.boot:spring-boot-devtools',
			'org.springframework.boot:spring-boot-starter-web',
			'org.springframework.boot:spring-boot-starter-jdbc',
			'org.springframework.boot:spring-boot-starter-mail',
			'org.springframework.boot:spring-boot-starter-thymeleaf',
			'org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.0',
			'tk.mybatis:mapper-spring-boot-starter:1.1.1',
			'com.github.pagehelper:pagehelper-spring-boot-starter:1.1.0'
	)
	runtime('mysql:mysql-connector-java')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	myBatisGenerator('org.mybatis.generator:mybatis-generator-core:1.3.2')
	myBatisGenerator('mysql:mysql-connector-java')
	myBatisGenerator('tk.mybatis:mapper:3.4.0')
}

def getDbProperties = {
	def properties = new Properties()
	file("src/main/resources/generator/db.properties").withInputStream { inputStream ->
		properties.load(inputStream)
	}
	properties;
}
task myBatisGenerate << {
	def properties = getDbProperties()
	ant.properties['targetProject'] = projectDir.path
	ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
	ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
	ant.properties['userId'] = properties.getProperty("jdbc.user")
	ant.properties['password'] = properties.getProperty("jdbc.pass")
	ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
	ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
	ant.properties['modelPackage'] = properties.getProperty("modelPackage")
	ant.properties['mapperPackage'] = properties.getProperty("mapperPackage")
	ant.properties['sqlMapperPackage'] = properties.getProperty("sqlMapperPackage")
	ant.taskdef(
			name: 'mbgenerator',
			classname: 'org.mybatis.generator.ant.GeneratorAntTask',
			classpath: configurations.myBatisGenerator.asPath
	)
	ant.mbgenerator(overwrite: true,
			configfile: 'src/main/resources/generator/generatorConfig.xml', verbose: true) {
		propertyset {
			propertyref(name: 'targetProject')
			propertyref(name: 'userId')
			propertyref(name: 'driverClass')
			propertyref(name: 'connectionURL')
			propertyref(name: 'password')
			propertyref(name: 'src_main_java')
			propertyref(name: 'src_main_resources')
			propertyref(name: 'modelPackage')
			propertyref(name: 'mapperPackage')
			propertyref(name: 'sqlMapperPackage')
		}
	}
}